-- MySQL Script generated by MySQL Workbench
-- 09/09/19 22:45:14
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema GoUdb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `GoUdb` ;

-- -----------------------------------------------------
-- Schema GoUdb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `GoUdb` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `GoUdb` ;

-- -----------------------------------------------------
-- Table `GoUdb`.`usuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GoUdb`.`usuarios` (
  `cedula` INT(20) NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `apellido` VARCHAR(45) NOT NULL,
  `celular` VARCHAR(25) NOT NULL,
  `correo_elec` VARCHAR(100) NOT NULL,
  `foto` VARCHAR(150) NULL,
  `fecha_nac` DATE NOT NULL,
  `contrasena` VARCHAR(25) NOT NULL,
  `foto_carnet` VARCHAR(150) NOT NULL,
  `cuenta_activada` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`cedula`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `cedula_UNIQUE` ON `GoUdb`.`usuarios` (`cedula` ASC);


-- -----------------------------------------------------
-- Table `GoUdb`.`referidos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GoUdb`.`referidos` (
  `id_usuario` INT(20) NOT NULL,
  `codigo` VARCHAR(50) NOT NULL,
  `caducidad` DATETIME NOT NULL,
  `cant_referidos` INT NOT NULL,
  PRIMARY KEY (`id_usuario`, `codigo`),
  CONSTRAINT `FK_id_usuario_referidos`
    FOREIGN KEY (`id_usuario`)
    REFERENCES `GoUdb`.`usuarios` (`cedula`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `codigo_UNIQUE` ON `GoUdb`.`referidos` (`codigo` ASC);


-- -----------------------------------------------------
-- Table `GoUdb`.`conductores`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GoUdb`.`conductores` (
  `cedula` INT(20) NOT NULL,
  `codigo_asoc` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `apellido` VARCHAR(45) NOT NULL,
  `celular` VARCHAR(45) NOT NULL,
  `correo_elec` VARCHAR(45) NOT NULL,
  `foto` VARCHAR(150) NOT NULL,
  `fecha_nac` DATE NOT NULL,
  `contrasena` VARCHAR(25) NOT NULL,
  `fecha_ven_pase` DATE NOT NULL,
  `foto_pase` VARCHAR(150) NOT NULL,
  `foto_cedula` VARCHAR(150) NOT NULL,
  `cod_referido` VARCHAR(50) NOT NULL,
  `cuenta_activada` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`codigo_asoc`, `cedula`),
  CONSTRAINT `FK_codigo_referido`
    FOREIGN KEY (`cod_referido`)
    REFERENCES `GoUdb`.`referidos` (`codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `cedula_UNIQUE` ON `GoUdb`.`conductores` (`cedula` ASC);

CREATE UNIQUE INDEX `codigo_asoc_UNIQUE` ON `GoUdb`.`conductores` (`codigo_asoc` ASC);

CREATE INDEX `FK_codigo_referido_idx` ON `GoUdb`.`conductores` (`cod_referido` ASC);


-- -----------------------------------------------------
-- Table `GoUdb`.`vehiculos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GoUdb`.`vehiculos` (
  `placa` VARCHAR(10) NOT NULL,
  `codigo_asoc` INT NOT NULL,
  `tipo_vehiculo` VARCHAR(45) NOT NULL,
  `estado_vehiculo` TINYINT(1) NOT NULL,
  `modelo` INT(5) NOT NULL,
  `marca` VARCHAR(45) NOT NULL,
  `color` VARCHAR(45) NOT NULL,
  `cupos` INT NOT NULL,
  `fecha_ven_soat` DATE NOT NULL,
  `fecha_ven_tecno` DATE NOT NULL,
  `foto_soat` VARCHAR(150) NOT NULL,
  `foto_tarj_prop` VARCHAR(150) NOT NULL,
  PRIMARY KEY (`placa`),
  CONSTRAINT `FK_codigo_asoc_vehiculo`
    FOREIGN KEY (`codigo_asoc`)
    REFERENCES `GoUdb`.`conductores` (`codigo_asoc`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `placa_UNIQUE` ON `GoUdb`.`vehiculos` (`placa` ASC);

CREATE INDEX `FK_codigo_asoc_vehiculo_idx` ON `GoUdb`.`vehiculos` (`codigo_asoc` ASC);


-- -----------------------------------------------------
-- Table `GoUdb`.`roles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GoUdb`.`roles` (
  `id_usuario` INT(20) NOT NULL,
  `usuario` TINYINT(1) NOT NULL DEFAULT 0,
  `conductor` TINYINT(1) NOT NULL DEFAULT 0,
  `administrador` TINYINT(1) NOT NULL DEFAULT 0,
  `superusuario` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id_usuario`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `id_usuario_UNIQUE` ON `GoUdb`.`roles` (`id_usuario` ASC);


-- -----------------------------------------------------
-- Table `GoUdb`.`rutas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GoUdb`.`rutas` (
  `id_ruta` INT NOT NULL AUTO_INCREMENT,
  `conductor` INT(20) NOT NULL,
  `origen` VARCHAR(45) NOT NULL,
  `destino` VARCHAR(45) NOT NULL,
  `opcion_parada` TINYINT(1) NOT NULL,
  `tarifa_destino` INT NOT NULL,
  `hora_sal` DATETIME NOT NULL,
  `hora_lleg` DATETIME NOT NULL,
  `cupos` INT NOT NULL,
  `historial_viaje` VARCHAR(500) NOT NULL,
  PRIMARY KEY (`id_ruta`),
  CONSTRAINT `FK_conductor`
    FOREIGN KEY (`conductor`)
    REFERENCES `GoUdb`.`conductores` (`cedula`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idruta_UNIQUE` ON `GoUdb`.`rutas` (`id_ruta` ASC);

CREATE INDEX `FK_conductor_idx` ON `GoUdb`.`rutas` (`conductor` ASC);


-- -----------------------------------------------------
-- Table `GoUdb`.`servicios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GoUdb`.`servicios` (
  `id_servicio` INT NOT NULL AUTO_INCREMENT,
  `id_ruta` INT NOT NULL,
  `usuario` INT(20) NOT NULL,
  `conductor` INT(20) NOT NULL,
  `parada` VARCHAR(45) NOT NULL,
  `tarifa_automatica` INT NOT NULL,
  `cancelar_servicio` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id_servicio`),
  CONSTRAINT `FK_idservicio`
    FOREIGN KEY (`id_ruta`)
    REFERENCES `GoUdb`.`rutas` (`id_ruta`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_usuario`
    FOREIGN KEY (`usuario`)
    REFERENCES `GoUdb`.`usuarios` (`cedula`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_conductor_servicio`
    FOREIGN KEY (`conductor`)
    REFERENCES `GoUdb`.`conductores` (`cedula`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idservicios_UNIQUE` ON `GoUdb`.`servicios` (`id_servicio` ASC);

CREATE INDEX `FK_idservicio_idx` ON `GoUdb`.`servicios` (`id_ruta` ASC);

CREATE INDEX `FK_usuario_idx` ON `GoUdb`.`servicios` (`usuario` ASC);

CREATE INDEX `FK_conductor_servicio_idx` ON `GoUdb`.`servicios` (`conductor` ASC);


-- -----------------------------------------------------
-- Table `GoUdb`.`pasajeros`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GoUdb`.`pasajeros` (
  `idruta` INT NOT NULL,
  `usuario` INT(20) NOT NULL,
  CONSTRAINT `FK_idruta`
    FOREIGN KEY (`idruta`)
    REFERENCES `GoUdb`.`rutas` (`id_ruta`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pasajero`
    FOREIGN KEY (`usuario`)
    REFERENCES `GoUdb`.`usuarios` (`cedula`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GoUdb`.`auditoria_usuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GoUdb`.`auditoria_usuarios` (
  `id_usuario` INT(20) NOT NULL,
  `sanciones_tipo` VARCHAR(100) NOT NULL DEFAULT 'Sin_sanciones',
  `acumulado` INT NOT NULL DEFAULT 0,
  `cantidad_calificaciones` INT NOT NULL DEFAULT 0,
  `estado_usuario` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id_usuario`),
  CONSTRAINT `FK_id_auditoria_usuario`
    FOREIGN KEY (`id_usuario`)
    REFERENCES `GoUdb`.`usuarios` (`cedula`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `FK_id_usuario_idx` ON `GoUdb`.`auditoria_usuarios` (`id_usuario` ASC);

CREATE UNIQUE INDEX `id_usuario_UNIQUE` ON `GoUdb`.`auditoria_usuarios` (`id_usuario` ASC);


-- -----------------------------------------------------
-- Table `GoUdb`.`auditoria_conductores`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GoUdb`.`auditoria_conductores` (
  `id_conductor` INT(20) NOT NULL,
  `sanciones_tipo` VARCHAR(100) NOT NULL DEFAULT 'Sin_sanciones',
  `acumulado` INT NOT NULL DEFAULT 0,
  `cantidad_calificaciones` INT NOT NULL DEFAULT 0,
  `estado_conductor` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id_conductor`),
  CONSTRAINT `FK_id_conductor_auditoria`
    FOREIGN KEY (`id_conductor`)
    REFERENCES `GoUdb`.`conductores` (`cedula`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `id_conductor_UNIQUE` ON `GoUdb`.`auditoria_conductores` (`id_conductor` ASC);


-- -----------------------------------------------------
-- Table `GoUdb`.`tokens_usuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GoUdb`.`tokens_usuarios` (
  `id_usuario` INT(20) NOT NULL,
  `solicitud_token` TINYINT(1) NOT NULL,
  `token` VARCHAR(100) NOT NULL,
  `plazo_token` DATETIME NOT NULL,
  `ultimo_token` DATE NOT NULL,
  PRIMARY KEY (`id_usuario`),
  CONSTRAINT `FK_idusuario_token`
    FOREIGN KEY (`id_usuario`)
    REFERENCES `GoUdb`.`usuarios` (`cedula`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `id_usuario_UNIQUE` ON `GoUdb`.`tokens_usuarios` (`id_usuario` ASC);


-- -----------------------------------------------------
-- Table `GoUdb`.`tokens_conductores`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GoUdb`.`tokens_conductores` (
  `id_usuario` INT(20) NOT NULL,
  `solicitud_token` TINYINT(1) NOT NULL,
  `token` VARCHAR(100) NOT NULL,
  `plazo_token` DATETIME NOT NULL,
  `ultimo_token` DATE NOT NULL,
  PRIMARY KEY (`id_usuario`),
  CONSTRAINT `FK_idusuario_conductores`
    FOREIGN KEY (`id_usuario`)
    REFERENCES `GoUdb`.`conductores` (`cedula`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `id_usuario_UNIQUE` ON `GoUdb`.`tokens_conductores` (`id_usuario` ASC);


-- -----------------------------------------------------
-- Table `GoUdb`.`log_rutas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GoUdb`.`log_rutas` (
  `tipo_registro` VARCHAR(45) NOT NULL,
  `fecha` DATETIME NOT NULL,
  `id_ruta` INT NOT NULL,
  `conductor` INT(20) NOT NULL,
  `origen` VARCHAR(45) NOT NULL,
  `destino` VARCHAR(45) NOT NULL,
  `opcion_parada` TINYINT(1) NOT NULL,
  `tarifa_destino` INT NOT NULL,
  `hora_sal` DATETIME NOT NULL,
  `hora_lleg` DATETIME NOT NULL,
  `cupos` INT NOT NULL,
  `historial_viaje` VARCHAR(500) NOT NULL)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GoUdb`.`log_servicios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GoUdb`.`log_servicios` (
  `tipo_registro` VARCHAR(45) NOT NULL,
  `fecha` DATETIME NOT NULL,
  `id_servicio` INT NOT NULL,
  `id_ruta` INT NOT NULL,
  `usuario` INT(20) NOT NULL,
  `conductor` INT(20) NOT NULL,
  `parada` VARCHAR(45) NOT NULL,
  `tarifa_automatica` INT NOT NULL,
  `cancelar_servicio` TINYINT(1) NOT NULL DEFAULT 0)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GoUdb`.`log_vehiculos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GoUdb`.`log_vehiculos` (
  `tipo_registro` VARCHAR(45) NOT NULL,
  `fecha` DATETIME NOT NULL,
  `placa` VARCHAR(10) NOT NULL,
  `codigo_asoc` INT NOT NULL,
  `tipo_vehiculo` VARCHAR(45) NOT NULL,
  `estado_vehiculo` TINYINT(1) NOT NULL,
  `modelo` INT(5) NOT NULL,
  `marca` VARCHAR(45) NOT NULL,
  `color` VARCHAR(45) NOT NULL,
  `cupos` INT NOT NULL,
  `fecha_ven_soat` DATE NOT NULL,
  `fecha_ven_tecno` DATE NOT NULL,
  `foto_soat` VARCHAR(150) NOT NULL,
  `foto_tarj_prop` VARCHAR(150) NOT NULL)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GoUdb`.`log_usuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GoUdb`.`log_usuarios` (
  `tipo_registro` VARCHAR(45) NOT NULL,
  `fecha` DATETIME NOT NULL,
  `cedula` INT(15) NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `apellido` VARCHAR(45) NOT NULL,
  `celular` VARCHAR(25) NOT NULL,
  `correo_elec` VARCHAR(100) NOT NULL,
  `foto` VARCHAR(150) NULL,
  `fecha_nac` DATE NOT NULL,
  `contrasena` VARCHAR(25) NOT NULL,
  `foto_carnet` VARCHAR(150) NOT NULL,
  `cuenta_activada` TINYINT(1) NOT NULL)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GoUdb`.`log_conductores`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GoUdb`.`log_conductores` (
  `tipo_registro` VARCHAR(45) NOT NULL,
  `fecha` DATETIME NOT NULL,
  `cedula` INT(20) NOT NULL,
  `codigo_asoc` INT NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `apellido` VARCHAR(45) NOT NULL,
  `celular` VARCHAR(45) NOT NULL,
  `correo_elec` VARCHAR(45) NOT NULL,
  `foto` VARCHAR(150) NOT NULL,
  `fecha_nac` DATE NOT NULL,
  `contrasena` VARCHAR(25) NOT NULL,
  `fecha_ven_pase` DATE NOT NULL,
  `foto_pase` VARCHAR(150) NOT NULL,
  `foto_cedula` VARCHAR(150) NOT NULL,
  `codigo_referido` VARCHAR(50) NOT NULL,
  `cuenta_activada` TINYINT(1) NOT NULL)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GoUdb`.`log_calificaciones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GoUdb`.`log_calificaciones` (
  `tipo_registro` VARCHAR(45) NOT NULL,
  `fecha` DATETIME NOT NULL,
  `id_usuario` INT(20) NOT NULL,
  `sanciones_tipo` VARCHAR(100) NOT NULL DEFAULT 'Sin_sanciones',
  `acumulado` INT NOT NULL DEFAULT 0,
  `cantidad_calificaciones` INT NOT NULL DEFAULT 0,
  `estado_usuario` TINYINT(1) NOT NULL DEFAULT 1)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GoUdb`.`log_roles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GoUdb`.`log_roles` (
  `tipo_registro` VARCHAR(45) NOT NULL,
  `fecha` DATETIME NOT NULL,
  `id_usuario` INT(20) NOT NULL,
  `usuario` VARCHAR(25) NOT NULL,
  `conductor` VARCHAR(25) NOT NULL,
  `administrador` VARCHAR(25) NOT NULL,
  `superusuario` VARCHAR(25) NOT NULL)
ENGINE = InnoDB;

USE `GoUdb`;

DELIMITER $$
USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`usuarios_BEFORE_INSERT` BEFORE INSERT ON `usuarios` FOR EACH ROW BEGIN 
INSERT INTO `roles` (id_usuario, usuario, conductor, administrador, superusuario) VALUES (NEW.cedula , true, false, false, false) ; END
    $$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`usuarios_AFTER_INSERT` AFTER INSERT ON `usuarios` FOR EACH ROW
    BEGIN
		INSERT INTO `auditoria_usuarios` (id_usuario) VALUES (NEW.cedula) ; 
        
        INSERT INTO `log_usuarios` (tipo_registro, fecha, cedula, nombre, apellido, celular, correo_elec, foto, fecha_nac, contrasena, foto_carnet, cuenta_activada) VALUES ("creación", now(), NEW.cedula, NEW.nombre, NEW.apellido, NEW.celular, NEW.correo_elec, NEW.foto, NEW.fecha_nac, NEW.contrasena, NEW.foto_carnet,  NEW.cuenta_activada);
    END$$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`usuarios_AFTER_UPDATE` AFTER UPDATE ON `usuarios` FOR EACH ROW
    BEGIN
    INSERT INTO `log_usuarios` (tipo_registro, fecha, cedula, nombre, apellido, celular, correo_elec, foto, fecha_nac, contrasena, foto_carnet) VALUES ("Modificación", now(), NEW.cedula, NEW.nombre, NEW.apellido, NEW.celular, NEW.correo_elec, NEW.foto, NEW.fecha_nac, NEW.contrasena, NEW.foto_carnet);
    END$$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`usuarios_BEFORE_DELETE` BEFORE DELETE ON `usuarios` FOR EACH ROW
    BEGIN 
    INSERT INTO `log_usuarios` (tipo_registro, fecha, cedula, nombre, apellido, celular, correo_elec, foto, fecha_nac, contrasena, foto_carnet) VALUES ("Eliminación", now(), OLD.cedula, OLD.nombre, OLD.apellido, OLD.celular, OLD.correo_elec, OLD.foto, OLD.fecha_nac, OLD.contrasena, OLD.foto_carnet);
    DELETE FROM `roles` WHERE id_usuario = OLD.cedula;
    END$$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`conductores_AFTER_INSERT` AFTER INSERT ON `conductores` FOR EACH ROW
BEGIN
	INSERT INTO `roles` (id_usuario, conductor) VALUES (NEW.cedula, true) 
    ON DUPLICATE KEY UPDATE `conductor` = '1'; 
	INSERT INTO `auditoria_conductores` (id_conductor) VALUES (NEW.cedula) ; 
    
    INSERT INTO `log_conductores` (tipo_registro, fecha, cedula, codigo_asoc, nombre, apellido, celular, correo_elec, foto, fecha_nac, contrasena, fecha_ven_pase, foto_pase, foto_cedula, cod_referido, cuenta_activada) VALUES ("Creación", now(), NEW.cedula, NEW.codigo_asoc, NEW.nombre, NEW.apellido, NEW.celular, NEW.correo_elec, NEW.foto, NEW.fecha_nac, NEW.contrasena, NEW.fecha_ven_pase, NEW.foto_pase, NEW.foto_cedula, NEW.cod_referido, NEW.cuenta_activada);
END
    $$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`conductores_AFTER_UPDATE` AFTER UPDATE ON `conductores` FOR EACH ROW
    BEGIN 
    INSERT INTO `log_conductores` (tipo_registro, fecha, cedula, codigo_asoc,nombre, apellido, celular, correo_elec, foto, fecha_nac, contrasena, fecha_ven_pase, foto_pase, foto_cedula, codigo_referido, cuenta_activada) VALUES ("Modificación", now(), NEW.cedula, NEW.codigo_asoc, NEW.nombre, NEW.apellido, NEW.celular, NEW.correo_elec, NEW.foto, NEW.fecha_nac, NEW.contrasena, NEW.fecha_ven_pase, NEW.foto_pase, NEW.foto_cedula, NEW.cod_referido, NEW.cuenta_activada);
    
    END$$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`conductores_BEFORE_DELETE` BEFORE DELETE ON `conductores` FOR EACH ROW
    BEGIN 
    INSERT INTO `log_conductores` (tipo_registro, fecha, cedula, codigo_asoc, nombre, apellido, celular, correo_elec, foto, fecha_nac, contrasena, fecha_ven_pase, foto_pase, foto_cedula, codigo_referido, cuenta_activada) VALUES ("Eliminación", now(), OLD.cedula, OLD.codigo_asoc, OLD.nombre, OLD.apellido, OLD.celular, OLD.correo_elec, OLD.foto, OLD.fecha_nac, OLD.contrasena, OLD.fecha_ven_pase, OLD.foto_pase, OLD.foto_cedula, OLD.cod_referido, OLD.cuenta_activada);
    
    END$$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`vehiculos_AFTER_INSERT` AFTER INSERT ON `vehiculos` FOR EACH ROW
BEGIN
    INSERT INTO `log_vehiculos` (tipo_registro, fecha, placa, codigo_asoc, tipo_vehiculo, estado_vehiculo, modelo, marca, color, cupos, fecha_ven_soat, fecha_ven_tecno, foto_soat, foto_tarj_prop) VALUES ("Creación", now(), NEW.placa, NEW.codigo_asoc, NEW.tipo_vehiculo, NEW.estado_vehiculo, NEW.modelo, NEW.marca, NEW.color, NEW.cupos, NEW.fecha_ven_soat, NEW.fecha_ven_tecno, NEW.foto_soat, NEW.foto_tarj_prop);  
    
    END$$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`vehiculos_AFTER_UPDATE` AFTER UPDATE ON `vehiculos` FOR EACH ROW
    BEGIN
    INSERT INTO `log_vehiculos` (tipo_registro, fecha, placa, codigo_asoc, tipo_vehiculo, estado_vehiculo, modelo, marca, color, cupos, fecha_ven_soat, fecha_ven_tecno, foto_soat, foto_tarj_prop) VALUES ("Modificación", now(), NEW.placa, NEW.codigo_asoc, NEW.tipo_vehiculo, NEW.estado_vehiculo, NEW.modelo, NEW.marca, NEW.color, NEW.cupos, NEW.fecha_ven_soat, NEW.fecha_ven_tecno, NEW.foto_soat, NEW.foto_tarj_prop);  
    
    END$$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`vehiculos_BEFORE_DELETE` BEFORE DELETE ON `vehiculos` FOR EACH ROW
    BEGIN
    INSERT INTO `log_vehiculos` (tipo_registro, fecha, placa, codigo_asoc, tipo_vehiculo, estado_vehiculo, modelo, marca, color, cupos, fecha_ven_soat, fecha_ven_tecno, foto_soat, foto_tarj_prop) VALUES ("Eliminación", now(), OLD.placa, OLD.codigo_asoc,OLD.tipo_vehiculo, OLD.estado_vehiculo, OLD.modelo, OLD.marca, OLD.color, OLD.cupos, OLD.fecha_ven_soat, OLD.fecha_ven_tecno, OLD.foto_soat, OLD.foto_tarj_prop);  
    END$$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`roles_AFTER_INSERT` AFTER INSERT ON `roles` FOR EACH ROW
    BEGIN
    INSERT INTO `log_roles` (tipo_registro, fecha, id_usuario, usuario, conductor, administrador, superusuario) VALUES ("Asignacion de Roles", now(), NEW.id_usuario, NEW.usuario, NEW.conductor, NEW.administrador, NEW.superusuario);
    END$$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`roles_AFTER_UPDATE` AFTER UPDATE ON `roles` FOR EACH ROW
    BEGIN
    INSERT INTO `log_roles` (tipo_registro, fecha, id_usuario, usuario, conductor, administrador, superusuario) VALUES ("Asignacion de Roles", now(), NEW.id_usuario, NEW.usuario, NEW.conductor, NEW.administrador, NEW.superusuario);
    END$$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`roles_BEFORE_DELETE` BEFORE DELETE ON `roles` FOR EACH ROW
    BEGIN
    INSERT INTO `log_roles` (tipo_registro, fecha, id_usuario, usuario, conductor, administrador, superusuario) VALUES ("Asignacion de Roles", now(), OLD.id_usuario, OLD.usuario, OLD.conductor, OLD.administrador, OLD.superusuario);
    END$$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`rutas_AFTER_INSERT` AFTER INSERT ON `rutas` FOR EACH ROW
    BEGIN
		INSERT INTO `log_rutas` (tipo_registro, fecha, id_ruta, conductor, origen, destino, opcion_parada, tarifa_destino, hora_sal, hora_lleg, cupos, historial_viaje) VALUES ("Creación", now(), NEW.id_ruta, NEW.conductor, NEW.origen, NEW.destino, NEW.opcion_parada, NEW.tarifa_destino, NEW.hora_sal, NEW.hora_lleg, NEW.cupos, NEW.historial_viaje);  
        END$$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`rutas_AFTER_UPDATE` AFTER UPDATE ON `rutas` FOR EACH ROW
     BEGIN
		INSERT INTO `log_rutas` (tipo_registro, fecha, id_ruta, conductor, origen, destino, opcion_parada, tarifa_destino, hora_sal, hora_lleg, cupos, historial_viaje) VALUES ("Modificación", now(), NEW.id_ruta, NEW.conductor, NEW.origen, NEW.destino, NEW.opcion_parada, NEW.tarifa_destino, NEW.hora_sal, NEW.hora_lleg, NEW.cupos, NEW.historial_viaje);  
        END$$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`rutas_BEFORE_DELETE` BEFORE DELETE ON `rutas` FOR EACH ROW
     BEGIN
		INSERT INTO `log_rutas` (tipo_registro, fecha, id_ruta, conductor, origen, destino, opcion_parada, tarifa_destino, hora_sal, hora_lleg, cupos, historial_viaje) VALUES ("Eliminación", now(), OLD.id_ruta, OLD.conductor, OLD.origen, OLD.destino, OLD.opcion_parada, OLD.tarifa_destino, OLD.hora_sal, OLD.hora_lleg, OLD.cupos, OLD.historial_viaje);  
        END$$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`servicios_AFTER_INSERT` AFTER INSERT ON `servicios` FOR EACH ROW
    BEGIN
		INSERT INTO `log_servicios` (tipo_registro, fecha, id_servicio, id_ruta, usuario, conductor, parada, tarifa_automatica, cancelar_servicio) VALUES ("Creación", now(), NEW.id_servicio, NEW.id_ruta, NEW.usuario, NEW.conductor, NEW.parada, NEW.tarifa_automatica, NEW.cancelar_servicio);  
        END$$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`servicios_AFTER_UPDATE` AFTER UPDATE ON `servicios` FOR EACH ROW
    BEGIN
		INSERT INTO `log_servicios` (tipo_registro, fecha, id_servicio, id_ruta, usuario, conductor, parada, tarifa_automatica, cancelar_servicio) VALUES ("Modificación", now(), NEW.id_servicio, NEW.id_ruta, NEW.usuario, NEW.conductor, NEW.parada, NEW.tarifa_automatica, NEW.cancelar_servicio);  
        END$$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`servicios_BEFORE_DELETE` BEFORE DELETE ON `servicios` FOR EACH ROW
    BEGIN
		INSERT INTO `log_servicios` (tipo_registro, fecha, id_servicio, id_ruta, usuario, conductor, parada, tarifa_automatica, cancelar_servicio) VALUES ("Eliminación", now(), OLD.id_servicio, OLD.id_ruta, OLD.usuario, OLD.conductor, OLD.parada, OLD.tarifa_automatica, OLD.cancelar_servicio);  
        END$$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`auditoria_usuarios_AFTER_UPDATE` AFTER UPDATE ON `auditoria_usuarios` FOR EACH ROW
    BEGIN
    INSERT INTO `log_calificaciones` (tipo_registro, fecha, id_usuario, sanciones_tipo, acumulado, cantidad_calificaciones, estado_usuario) VALUES ("Creación", now(), NEW.id_usuario, NEW.sanciones_tipo, NEW.acumulado, NEW.cantidad_calificaciones, NEW.estado_usuario);
    END $$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`auditoria_usuarios_BEFORE_DELETE` BEFORE DELETE ON `auditoria_usuarios` FOR EACH ROW
    BEGIN
    INSERT INTO `log_calificaciones` (tipo_registro, fecha, id_usuario, sanciones_tipo, acumulado, cantidad_calificaciones, estado_usuario) VALUES ("Creación", now(), OLD.id_usuario, OLD.sanciones_tipo, OLD.acumulado, OLD.cantidad_calificaciones, OLD.estado_usuario);
    END $$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`auditoria_conductores_AFTER_UPDATE` AFTER UPDATE ON `auditoria_conductores` FOR EACH ROW
    BEGIN
    INSERT INTO `log_calificaciones` (tipo_registro, fecha, id_usuario, sanciones_tipo, acumulado, cantidad_calificaciones, estado_usuario) VALUES ("Modificación", now(), NEW.id_conductor, NEW.sanciones_tipo, NEW.acumulado, NEW.cantidad_calificaciones, NEW.estado_conductor);
    END $$

USE `GoUdb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GoUdb`.`auditoria_conductores_BEFORE_DELETE` BEFORE DELETE ON `auditoria_conductores` FOR EACH ROW
    BEGIN
    INSERT INTO `log_calificaciones` (tipo_registro, fecha, id_usuario, sanciones_tipo, acumulado, cantidad_calificaciones, estado_usuario) VALUES ("Eliminación", now(), OLD.id_conductor, OLD.sanciones_tipo, OLD.acumulado, OLD.cantidad_calificaciones, OLD.estado_conductor);
    END $$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
